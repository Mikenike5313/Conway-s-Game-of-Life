//Stored rotated to minimize rows, then angle


var patterns = {
  stillLifes: {
    block: [
      [1, 1],
      [1, 1]
    ],
    beehive: [
      [0, 1, 1, 0],
      [1, 0, 0, 1],
      [0, 1, 1, 0]
    ],
    loaf: [
      [0, 1, 1, 0],
      [1, 0, 0, 1],
      [0, 1, 0, 1],
      [0, 0, 1, 0]
    ],
    boat: [
      [0, 1, 1],
      [1, 0, 1],
      [0, 1, 0]
    ],
    tub: [
      [0, 1, 0],
      [1, 0, 1],
      [0, 1, 0]
    ],
  },
  oscillators: {
    blinker: [
      [1, 1, 1]
    ],
    toad: [
      [1, 1, 1, 0],
      [0, 1, 1, 1]
    ],
    beacon: [
      [1, 1, 0, 0],
      [1, 0, 0, 0],
      [0, 0, 0, 1],
      [0, 0, 1, 1]
    ],
    pulsar: [
      [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
      [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
      [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
      [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0],
      [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
      [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
      [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0],
    ],
    pentadecathlon: [
      [1, 1, 1, 1, 1, 1, 1, 1],
      [1, 0, 1, 1, 1, 1, 0, 1],
      [1, 1, 1, 1, 1, 1, 1, 1]
    ],
  },
  spaceships: {
    glider: [
      [1, 1, 0],
      [0, 1, 1],
      [1, 0, 0]
    ],
    lightweight: [
      [1, 0, 0, 1, 0],
      [0, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [0, 1, 1, 1, 1]
    ],
  },
  seeds: {
    rPentomino: [
      [0, 1, 1],
      [1, 1, 0],
      [0, 1, 0]
    ],
    acorn: [
      [0, 1, 0, 0, 0, 0, 0],
      [0, 0, 0, 1, 0, 0, 0],
      [1, 1, 0, 0, 1, 1, 1]
    ],
  },
  disappearing: {
    diehard: [
      [1, 1, 1, 0, 0, 0, 1, 0],
      [0, 0, 0, 0, 0, 0, 1, 1],
      [0, 1, 0, 0, 0, 0, 0, 0]
    ],
  },
  blockLaying: {
    minLive: [
      [0, 0, 0, 0, 0, 0, 1, 0],
      [0, 0, 0, 0, 1, 0, 1, 1],
      [0, 0, 0, 0, 1, 0, 1, 0],
      [0, 0, 0, 0, 1, 0, 0, 0],
      [0, 0, 1, 0, 0, 0, 0, 0],
      [1, 0, 1, 0, 0, 0, 0, 0]
    ],
    minBox: [
      [1, 0, 0, 1, 1],
      [0, 1, 0, 0, 1],
      [1, 1, 0, 0, 1],
      [0, 0, 1, 0, 0],
      [1, 1, 1, 0, 1]
    ],
    minRC: [
      [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1]
    ],
  },
  guns: {
    gosperGlider: [
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
      [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ],
  },



  converts: {

  },
  snips: {

  }
}

function rotate90CC(pattern) {
  if(!pattern.length || !pattern[0].length) {
    console.log('Cannot rotate pattern with a dimension of 0.');
    return;
  }
  var rotated = [];

  var cols = pattern.length;
  var rows = pattern[0].length;

  for(var r = 0; r < rows; r++) {
    rotated.push([]);
    for(var c = 0; c < cols; c++) {
      rotated[r][c] = pattern[c][rows-1-r];
    }
  }

  return rotated;
}
function rotate(pattern, theta) {
  if(theta%(Math.PI/2) !== 0) {
    alert('Angle must be a multiple of PI/2 radians.');
    return;
  }

  var rotations = theta/(Math.PI/2);
  var rotated = pattern;

  for(var turns = 0; turns < rotations; turns++) {
    rotated = rotate90CC(rotated);
  }

  return rotated;
}

function convert(data, split, dead) {
  var rows = data.split(split);
  var pattern = [];
  for(var r = 0; r < rows.length; r++) {
    pattern.push([]);
    for(var c = 0; c < rows[r].length; c++) {
      pattern[r][c] = rows[r][c] === dead ? 0 : 1;
    }
  }
  return pattern;
}
